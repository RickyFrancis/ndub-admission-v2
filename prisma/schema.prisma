// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  APPLICANT
  ADMIN
  SUPERADMIN
}

enum PaymentStatus {
  UNPAID
  PENDING
  PAID
}

enum PaymentMethods {
  BKASH
  BANK
}

enum Genders {
  MALE
  FEMALE
  OTHER
}

enum Religions {
  Christianity
  Islam
  Hinduism
  Buddhism
  Other
}

model Role {
  id    Int    @id @default(autoincrement())
  role  Roles  @default(APPLICANT)
  users User[] @relation("UserRole")
}

model User {
  id                     String                 @id @default(uuid())
  phone                  String                 @unique
  isPhoneVerified        Boolean                @default(false)
  email                  String                 @unique
  password               String
  role                   Role                   @relation("UserRole", fields: [roleId], references: [id])
  roleId                 Int
  profile                Profile?               @relation("UserProfile")
  phoneVerificationCodes PhoneVerificationCode?
  emailVerificationCodes EmailVerificationCode?
  date                   DateTime               @default(now())
}

model PhoneVerificationCode {
  id         Int      @id @default(autoincrement())
  code       String
  date       DateTime @default(now())
  isVerified Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model EmailVerificationCode {
  id         Int      @id @default(autoincrement())
  code       String
  date       DateTime @default(now())
  isVerified Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model Payment {
  id      Int            @id @default(autoincrement())
  status  PaymentStatus  @default(UNPAID)
  method  PaymentMethods
  details Json?
  date    DateTime       @default(now())
}

model Profile {
  id                        Int             @id @default(autoincrement())
  date                      DateTime        @default(now())
  user                      User            @relation("UserProfile", fields: [userId], references: [id])
  userId                    String          @unique // relation scalar field (used in the `@relation` attribute above)
  religion                  Religions
  gender                    Genders
  nationality               Nationalities   @default(Bangladeshi)
  dob                       DateTime
  bloodgroup                BloodGroups
  maritalStatus             MaritalStatuses
  birthCertificateNumber    String?
  nidNumber                 String?
  secondaryPhoneNumber      String?
  fathersName               String
  fathersOccupation         String?
  fathersPhoneNumber        String
  fathersNid                String?
  mothersName               String
  mothersOccupation         String?
  mothersPhoneNumber        String
  mothersNid                String?
  localGuardiansName        String
  localGuardiansOccupation  String?
  localGuardiansPhoneNumber String
  localGuardiansNid         String?
  emergencyContactName      String
  emergencyContactPhone     String
  presentAddress            String
  permamentAddress          String
  ssc                       SSC?
  hsc                       HSC?
  bachelor                  Bachelor?
  master                    Master[]
  experience                Experience[]
}

model SSC {
  id          Int          @id @default(autoincrement())
  profile     Profile      @relation(fields: [profileId], references: [id])
  profileId   Int          @unique
  institution String
  group       SSCHSCGroups
  year        DateTime
  gpa         Float
  subjects    String[]
}

model HSC {
  id          Int          @id @default(autoincrement())
  profile     Profile      @relation(fields: [profileId], references: [id])
  profileId   Int          @unique
  institution String
  group       SSCHSCGroups
  year        DateTime
  gpa         Float
  subjects    String[]
}

model Bachelor {
  id              Int      @id @default(autoincrement())
  profile         Profile  @relation(fields: [profileId], references: [id])
  profileId       Int      @unique
  course          String
  institution     String
  major           String?
  degreeStartYear DateTime
  degreeEndYear   DateTime
  cgpa            Float
}

model Master {
  id              Int      @id @default(autoincrement())
  profile         Profile  @relation(fields: [profileId], references: [id])
  profileId       Int
  course          String
  institution     String
  major           String?
  degreeStartYear DateTime
  degreeEndYear   DateTime
  cgpa            Float
}

model Experience {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int
  company   String
  position  String
  startYear DateTime
  endYear   DateTime
}

enum MaritalStatuses {
  MARRIED
  UNMARRIED
  DIVORCED
}

enum SSCHSCGroups {
  SCIENCE
  COMMERCE
  HUMANITIES
}

enum BloodGroups {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum Nationalities {
  Afghan
  Albanian
  Algerian
  American
  Andorran
  Angolan
  Antiguans
  Argentinean
  Armenian
  Australian
  Austrian
  Azerbaijani
  Bahamian
  Bahraini
  Bangladeshi
  Barbadian
  Barbudans
  Batswana
  Belarusian
  Belgian
  Belizean
  Beninese
  Bhutanese
  Bolivian
  Bosnian
  Brazilian
  British
  Bruneian
  Bulgarian
  Burkinabe
  Burmese
  Burundian
  Cambodian
  Cameroonian
  Canadian
  CapeVerdean
  CentralAfrican
  Chadian
  Chilean
  Chinese
  Colombian
  Comoran
  Congolese
  CostaRican
  Croatian
  Cuban
  Cypriot
  Czech
  Danish
  Djibouti
  Dominican
  Dutch
  Dutchman
  Dutchwoman
  EastTimorese
  Ecuadorean
  Egyptian
  Emirian
  EquatorialGuinean
  Eritrean
  Estonian
  Ethiopian
  Fijian
  Filipino
  Finnish
  French
  Gabonese
  Gambian
  Georgian
  German
  Ghanaian
  Greek
  Grenadian
  Guatemalan
  GuineaBissauan
  Guinean
  Guyanese
  Haitian
  Herzegovinian
  Honduran
  Hungarian
  IKiribati
  Icelander
  Indian
  Indonesian
  Iranian
  Iraqi
  Irish
  Israeli
  Italian
  Ivorian
  Jamaican
  Japanese
  Jordanian
  Kazakhstani
  Kenyan
  KittianandNevisian
  Kuwaiti
  Kyrgyz
  Laotian
  Latvian
  Lebanese
  Liberian
  Libyan
  Liechtensteiner
  Lithuanian
  Luxembourger
  Macedonian
  Malagasy
  Malawian
  Malaysian
  Maldivan
  Malian
  Maltese
  Marshallese
  Mauritanian
  Mauritian
  Mexican
  Micronesian
  Moldovan
  Monacan
  Mongolian
  Moroccan
  Mosotho
  Motswana
  Mozambican
  Namibian
  Nauruan
  Nepalese
  Netherlander
  NewZealander
  NiVanuatu
  Nicaraguan
  Nigerian
  Nigerien
  NorthKorean
  NorthernIrish
  Norwegian
  Omani
  Pakistani
  Palauan
  Panamanian
  PapuaNewGuinean
  Paraguayan
  Peruvian
  Polish
  Portuguese
  Qatari
  Romanian
  Russian
  Rwandan
  SaintLucian
  Salvadoran
  Samoan
  SanMarinese
  SaoTomean
  Saudi
  Scottish
  Senegalese
  Serbian
  Seychellois
  SierraLeonean
  Singaporean
  Slovakian
  Slovenian
  SolomonIslander
  Somali
  SouthAfrican
  SouthKorean
  Spanish
  SriLankan
  Sudanese
  Surinamer
  Swazi
  Swedish
  Swiss
  Syrian
  Taiwanese
  Tajik
  Tanzanian
  Thai
  Togolese
  Tongan
  TrinidadianorTobagonian
  Tunisian
  Turkish
  Tuvaluan
  Ugandan
  Ukrainian
  Uruguayan
  Uzbekistani
  Venezuelan
  Vietnamese
  Welsh
  Yemenite
  Zambian
  Zimbabwean
}
