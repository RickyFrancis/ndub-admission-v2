// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  role  Roles
  users User[] @relation("UserRole")
}

model User {
  id                     String                 @id @default(uuid())
  name                   String
  phone                  String                 @unique
  email                  String                 @unique
  password               String
  date                   DateTime               @default(now())
  role                   Role                   @relation("UserRole", fields: [roleId], references: [id])
  roleId                 Int
  profile                Profile?               @relation("UserProfile")
  phoneVerificationCodes PhoneVerificationCode?
  emailVerificationCodes EmailVerificationCode?
  ssc                    SSC?
  hsc                    HSC?
  bachelor               Bachelor?
  master                 Master[]
  experience             Experience[]
  images                 Images?
  createdDepartments     Department[]           @relation("DepartmentCreatedBy")
  updatedDepartments     Department[]           @relation("DepartmentUpdatedBy")
  createdPrograms        Program[]              @relation("ProgramCreatedBy")
  updatedPrograms        Program[]              @relation("ProgramUpdatedBy")
  createdExams           Exam[]                 @relation("ExamCreatedBy")
  updatedExams           Exam[]                 @relation("ExamUpdatedBy")
  createdNotices         Notice[]               @relation("NoticeCreatedBy")
  updatedNotices         Notice[]               @relation("NoticeUpdatedBy")
  Registration           Registration[]
}

model PhoneVerificationCode {
  id         Int      @id @default(autoincrement())
  code       String
  date       DateTime @default(now())
  isVerified Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model EmailVerificationCode {
  id         Int      @id @default(autoincrement())
  code       String
  date       DateTime @default(now())
  isVerified Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model Profile {
  id                        Int             @id @default(autoincrement())
  date                      DateTime        @default(now())
  user                      User            @relation("UserProfile", fields: [userId], references: [id])
  userId                    String          @unique // relation scalar field (used in the `@relation` attribute above)
  religion                  Religions
  gender                    Genders
  nationality               Nationalities   @default(Bangladeshi)
  dob                       DateTime
  bloodGroup                BloodGroups
  maritalStatus             MaritalStatuses
  birthCertificateNumber    String?
  nidNumber                 String?
  secondaryPhoneNumber      String?
  fathersName               String
  fathersOccupation         String?
  fathersPhoneNumber        String
  fathersNid                String?
  mothersName               String
  mothersOccupation         String?
  mothersPhoneNumber        String
  mothersNid                String?
  localGuardiansName        String
  localGuardiansOccupation  String?
  localGuardiansPhoneNumber String
  localGuardiansNid         String?
  emergencyContactName      String
  emergencyContactPhone     String
  presentAddress            String
  permanentAddress          String
}

model Images {
  id               Int    @id @default(autoincrement())
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique
  profilePicture   String
  signaturePicture String
}

model SSC {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  institution String
  group       SSCHSCGroups
  year        DateTime
  gpa         Float
  subjects    String[]
}

model HSC {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  institution String
  group       SSCHSCGroups
  year        DateTime
  gpa         Float
  subjects    String[]
}

model Bachelor {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  course          String
  institution     String
  major           String?
  degreeStartYear DateTime
  degreeEndYear   DateTime
  cgpa            Float
}

model Master {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  course          String
  institution     String
  major           String?
  degreeStartYear DateTime
  degreeEndYear   DateTime
  cgpa            Float
}

model Experience {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  company   String
  position  String
  startYear DateTime
  endYear   DateTime
}

model AdmissionTestMarks {
  id               Int    @id @default(autoincrement())
  // user             User   @relation(fields: [userId], references: [id])
  // userId           String @unique
  profilePicture   String
  signaturePicture String
}

model Department {
  id              Int       @id @default(autoincrement())
  name            String
  shortCode       String    @unique
  details         String?
  url             String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       User      @relation("DepartmentCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String    @unique
  updatedBy       User      @relation("DepartmentUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String    @unique
  createdFrom     String?
  updatedFrom     String?
  Program         Program[]
}

model Program {
  id              Int          @id @default(autoincrement())
  name            String
  shortCode       String       @unique
  details         String?
  url             String?
  credit          Int
  type            ProgramTypes
  department      Department   @relation(fields: [departmentId], references: [id])
  departmentId    Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       User         @relation("ProgramCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String       @unique
  updatedBy       User         @relation("ProgramUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String       @unique
  createdFrom     String?
  updatedFrom     String?
  Exam            Exam[]
}

model Exam {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  batch           Int
  trimester       Trimesters
  year            String
  examDate        DateTime
  conducted       Boolean
  program         Program        @relation(fields: [programId], references: [id])
  programId       Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       User           @relation("ExamCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String         @unique
  updatedBy       User?          @relation("ExamUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String?        @unique
  createdFrom     String?
  updatedFrom     String?
  Registration    Registration[]
}

model Registration {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  exam        Exam     @relation(fields: [examId], references: [id])
  examId      Int
  applicantId String
  Payment     Payment?
  date        DateTime @default(now())
  Result      Result?
}

model Result {
  id             Int          @id @default(autoincrement())
  written        Int
  viva           Int
  total          Int?
  position       Int?
  remarks        String?
  registration   Registration @relation(fields: [registrationId], references: [id])
  registrationId Int          @unique
  date           DateTime     @default(now())
}

model Payment {
  id             Int            @id @default(autoincrement())
  status         PaymentStatus  @default(UNPAID)
  method         PaymentMethods
  details        Json?
  registration   Registration   @relation(fields: [registrationId], references: [id])
  registrationId Int            @unique
  date           DateTime       @default(now())
}

model Notice {
  id              Int      @id @default(autoincrement())
  title           String
  body            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation("NoticeCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String   @unique
  updatedBy       User?    @relation("NoticeUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String?  @unique
  createdFrom     String?
  updatedFrom     String?
}

// Enums

enum Roles {
  APPLICANT
  ADMIN
  SUPERADMIN
}

enum PaymentStatus {
  UNPAID
  PENDING
  PAID
}

enum PaymentMethods {
  BKASH
  BANK
}

enum Genders {
  MALE
  FEMALE
  OTHER
}

enum Religions {
  Christianity
  Islam
  Hinduism
  Buddhism
  Other
}

enum Trimesters {
  SPRING
  SUMMER
  FALL
}

enum ProgramTypes {
  UNDERGRADUATE
  GRADUATE
}

enum MaritalStatuses {
  MARRIED
  UNMARRIED
  DIVORCED
}

enum SSCHSCGroups {
  SCIENCE
  COMMERCE
  HUMANITIES
}

enum BloodGroups {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum Nationalities {
  Afghan
  Albanian
  Algerian
  American
  Andorran
  Angolan
  Antiguans
  Argentinean
  Armenian
  Australian
  Austrian
  Azerbaijani
  Bahamian
  Bahraini
  Bangladeshi
  Barbadian
  Barbudans
  Batswana
  Belarusian
  Belgian
  Belizean
  Beninese
  Bhutanese
  Bolivian
  Bosnian
  Brazilian
  British
  Bruneian
  Bulgarian
  Burkinabe
  Burmese
  Burundian
  Cambodian
  Cameroonian
  Canadian
  CapeVerdean
  CentralAfrican
  Chadian
  Chilean
  Chinese
  Colombian
  Comoran
  Congolese
  CostaRican
  Croatian
  Cuban
  Cypriot
  Czech
  Danish
  Djibouti
  Dominican
  Dutch
  Dutchman
  Dutchwoman
  EastTimorese
  Ecuadorean
  Egyptian
  Emirian
  EquatorialGuinean
  Eritrean
  Estonian
  Ethiopian
  Fijian
  Filipino
  Finnish
  French
  Gabonese
  Gambian
  Georgian
  German
  Ghanaian
  Greek
  Grenadian
  Guatemalan
  GuineaBissauan
  Guinean
  Guyanese
  Haitian
  Herzegovinian
  Honduran
  Hungarian
  IKiribati
  Icelander
  Indian
  Indonesian
  Iranian
  Iraqi
  Irish
  Israeli
  Italian
  Ivorian
  Jamaican
  Japanese
  Jordanian
  Kazakhstani
  Kenyan
  KittianandNevisian
  Kuwaiti
  Kyrgyz
  Laotian
  Latvian
  Lebanese
  Liberian
  Libyan
  Liechtensteiner
  Lithuanian
  Luxembourger
  Macedonian
  Malagasy
  Malawian
  Malaysian
  Maldivan
  Malian
  Maltese
  Marshallese
  Mauritanian
  Mauritian
  Mexican
  Micronesian
  Moldovan
  Monacan
  Mongolian
  Moroccan
  Mosotho
  Motswana
  Mozambican
  Namibian
  Nauruan
  Nepalese
  Netherlander
  NewZealander
  NiVanuatu
  Nicaraguan
  Nigerian
  Nigerien
  NorthKorean
  NorthernIrish
  Norwegian
  Omani
  Pakistani
  Palauan
  Panamanian
  PapuaNewGuinean
  Paraguayan
  Peruvian
  Polish
  Portuguese
  Qatari
  Romanian
  Russian
  Rwandan
  SaintLucian
  Salvadoran
  Samoan
  SanMarinese
  SaoTomean
  Saudi
  Scottish
  Senegalese
  Serbian
  Seychellois
  SierraLeonean
  Singaporean
  Slovakian
  Slovenian
  SolomonIslander
  Somali
  SouthAfrican
  SouthKorean
  Spanish
  SriLankan
  Sudanese
  Surinamer
  Swazi
  Swedish
  Swiss
  Syrian
  Taiwanese
  Tajik
  Tanzanian
  Thai
  Togolese
  Tongan
  TrinidadianorTobagonian
  Tunisian
  Turkish
  Tuvaluan
  Ugandan
  Ukrainian
  Uruguayan
  Uzbekistani
  Venezuelan
  Vietnamese
  Welsh
  Yemenite
  Zambian
  Zimbabwean
}
